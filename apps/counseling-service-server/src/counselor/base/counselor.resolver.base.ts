/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Counselor } from "./Counselor";
import { CounselorCountArgs } from "./CounselorCountArgs";
import { CounselorFindManyArgs } from "./CounselorFindManyArgs";
import { CounselorFindUniqueArgs } from "./CounselorFindUniqueArgs";
import { CreateCounselorArgs } from "./CreateCounselorArgs";
import { UpdateCounselorArgs } from "./UpdateCounselorArgs";
import { DeleteCounselorArgs } from "./DeleteCounselorArgs";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { AvailabilityFindManyArgs } from "../../availability/base/AvailabilityFindManyArgs";
import { Availability } from "../../availability/base/Availability";
import { CounselorService } from "../counselor.service";
@graphql.Resolver(() => Counselor)
export class CounselorResolverBase {
  constructor(protected readonly service: CounselorService) {}

  async _counselorsMeta(
    @graphql.Args() args: CounselorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Counselor])
  async counselors(
    @graphql.Args() args: CounselorFindManyArgs
  ): Promise<Counselor[]> {
    return this.service.counselors(args);
  }

  @graphql.Query(() => Counselor, { nullable: true })
  async counselor(
    @graphql.Args() args: CounselorFindUniqueArgs
  ): Promise<Counselor | null> {
    const result = await this.service.counselor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Counselor)
  async createCounselor(
    @graphql.Args() args: CreateCounselorArgs
  ): Promise<Counselor> {
    return await this.service.createCounselor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Counselor)
  async updateCounselor(
    @graphql.Args() args: UpdateCounselorArgs
  ): Promise<Counselor | null> {
    try {
      return await this.service.updateCounselor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Counselor)
  async deleteCounselor(
    @graphql.Args() args: DeleteCounselorArgs
  ): Promise<Counselor | null> {
    try {
      return await this.service.deleteCounselor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Appointment], { name: "appointments" })
  async findAppointments(
    @graphql.Parent() parent: Counselor,
    @graphql.Args() args: AppointmentFindManyArgs
  ): Promise<Appointment[]> {
    const results = await this.service.findAppointments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Availability], { name: "availabilities" })
  async findAvailabilities(
    @graphql.Parent() parent: Counselor,
    @graphql.Args() args: AvailabilityFindManyArgs
  ): Promise<Availability[]> {
    const results = await this.service.findAvailabilities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
