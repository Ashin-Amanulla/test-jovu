/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Counselor as PrismaCounselor,
  Appointment as PrismaAppointment,
  Availability as PrismaAvailability,
} from "@prisma/client";

export class CounselorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CounselorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.counselor.count(args);
  }

  async counselors<T extends Prisma.CounselorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounselorFindManyArgs>
  ): Promise<PrismaCounselor[]> {
    return this.prisma.counselor.findMany<Prisma.CounselorFindManyArgs>(args);
  }
  async counselor<T extends Prisma.CounselorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounselorFindUniqueArgs>
  ): Promise<PrismaCounselor | null> {
    return this.prisma.counselor.findUnique(args);
  }
  async createCounselor<T extends Prisma.CounselorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounselorCreateArgs>
  ): Promise<PrismaCounselor> {
    return this.prisma.counselor.create<T>(args);
  }
  async updateCounselor<T extends Prisma.CounselorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounselorUpdateArgs>
  ): Promise<PrismaCounselor> {
    return this.prisma.counselor.update<T>(args);
  }
  async deleteCounselor<T extends Prisma.CounselorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounselorDeleteArgs>
  ): Promise<PrismaCounselor> {
    return this.prisma.counselor.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.counselor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }

  async findAvailabilities(
    parentId: string,
    args: Prisma.AvailabilityFindManyArgs
  ): Promise<PrismaAvailability[]> {
    return this.prisma.counselor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .availabilities(args);
  }
}
